--- acats_41/cxa/cxa3001.a
+++ cxa/cxa3001.a
@@ -49,6 +49,9 @@
 
 with Ada.Characters.Latin_1;
 with Ada.Characters.Handling;
+with Ada.Wide_Characters.Handling;
+with Ada.Wide_Characters.Latin_1;
+with Ada.Strings.Wide_Maps.Wide_Constants;
 with Report;
 
 procedure CXA3001 is
@@ -66,6 +69,32 @@
 
       package AC  renames Ada.Characters;
       package ACH renames Ada.Characters.Handling;
+      package AWC renames Ada.Wide_Characters;
+      package AWCH renames Ada.Wide_Characters.Handling;
+
+      function Is_Basic (X : Wide_Character) return Boolean is
+      begin
+         return Ada.Strings.Wide_Maps.Is_In
+                  (X, Ada.Strings.Wide_Maps.Wide_Constants.Basic_Set);
+      end Is_Basic;
+
+      function Is_Format (X : Wide_Character) return Boolean is
+      begin
+         return Ada.Strings.Wide_Maps.Is_In
+                  (X, Ada.Strings.Wide_Maps.Wide_Constants.Format_Set);
+      end Is_Format;
+
+      function Is_Other_Letter (X : Wide_Character) return Boolean is
+      begin
+         return Ada.Strings.Wide_Maps.Is_In
+                  (X, Ada.Strings.Wide_Maps.Wide_Constants.Other_Letter_Set);
+      end Is_Other_Letter;
+
+      function Is_Other_Number (X : Wide_Character) return Boolean is
+      begin
+         return Ada.Strings.Wide_Maps.Is_In
+                  (X, Ada.Strings.Wide_Maps.Wide_Constants.Other_Number_Set);
+      end Is_Other_Number;
 
       TC_Boolean : Boolean := False;
 
@@ -97,26 +126,28 @@
       end loop;
 
 
-      for i in Character'Pos(AC.Latin_1.Reserved_128) .. 
-               Character'Pos(AC.Latin_1.APC)  loop
-         if not ACH.Is_Control(Character'Val(i)) then
+      for i in AWC.Latin_1.Reserved_128 ..
+               AWC.Latin_1.APC  loop
+         if not AWCH.Is_Control(i) then
             Report.Failed ("Incorrect result from function Is_Control - 3");
          end if;
-         TC_Boolean := ACH.Is_Graphic(Character'Val(i)); 
+         TC_Boolean := AWCH.Is_Graphic(i);
          if TC_Boolean then
             Report.Failed ("Incorrect result from function Is_Graphic - 3");
             TC_Boolean := False;
          end if;
       end loop;
 
-      for i in Character'Pos(AC.Latin_1.No_Break_Space) ..
-               Character'Pos(AC.Latin_1.LC_Y_Diaeresis) loop
-         TC_Boolean := ACH.Is_Control(Character'Val(i)); 
+      for i in AWC.Latin_1.No_Break_Space ..
+               AWC.Latin_1.LC_Y_Diaeresis loop
+         TC_Boolean := AWCH.Is_Control(i);
          if TC_Boolean then
             Report.Failed ("Incorrect result from function Is_Control - 4");
             TC_Boolean := False;
          end if;
-         if not ACH.Is_Graphic(Character'Val(i)) then
+         if not AWCH.Is_Graphic(i) xor
+            i = AWC.Latin_1.SOFT_HYPHEN -- [drake]
+         then
             Report.Failed ("Incorrect result from function Is_Graphic - 4");
          end if;
       end loop;
@@ -127,10 +158,10 @@
               ACH.Is_Control(AC.Latin_1.IS3) and 
               ACH.Is_Control(AC.Latin_1.IS2) and 
               ACH.Is_Control(AC.Latin_1.IS1))       or
-         (ACH.Is_Control(AC.Latin_1.NBSP)           or
-          ACH.Is_Control(AC.Latin_1.Paragraph_Sign) or
+         (AWCH.Is_Control(AWC.Latin_1.NBSP)         or
+          AWCH.Is_Control(AWC.Latin_1.Paragraph_Sign)or
           ACH.Is_Control(AC.Latin_1.Minus_Sign)     or
-          ACH.Is_Control(AC.Latin_1.Ring_Above))
+          AWCH.Is_Control(AWC.Latin_1.Ring_Above))
       then
          Report.Failed ("Incorrect result from function Is_Control - 5");
       end if;
@@ -139,10 +170,10 @@
           ACH.Is_Graphic(AC.Latin_1.IS3)  or
           ACH.Is_Graphic(AC.Latin_1.IS2)  or
           ACH.Is_Graphic(AC.Latin_1.IS1)) or
-         not (ACH.Is_Graphic(AC.Latin_1.NBSP)           and
-              ACH.Is_Graphic(AC.Latin_1.Paragraph_Sign) and
+         not (AWCH.Is_Graphic(AWC.Latin_1.NBSP)         and
+              AWCH.Is_Graphic(AWC.Latin_1.Paragraph_Sign)and
               ACH.Is_Graphic(AC.Latin_1.Minus_Sign)     and
-              ACH.Is_Graphic(AC.Latin_1.Ring_Above))
+              AWCH.Is_Graphic(AWC.Latin_1.Ring_Above))
       then
          Report.Failed ("Incorrect result from function Is_Graphic - 5");
       end if;
@@ -163,23 +194,23 @@
          end if;
       end loop;
 
-      for i in Character'Pos(AC.Latin_1.UC_A_Grave) .. 
-               Character'Pos(AC.Latin_1.UC_O_Diaeresis) loop
-         if not ACH.Is_Letter(Character'Val(i)) then
+      for i in AWC.Latin_1.UC_A_Grave ..
+               AWC.Latin_1.UC_O_Diaeresis loop
+         if not AWCH.Is_Letter(i) then
             Report.Failed ("Incorrect Is_Letter result - 3");
          end if;
       end loop;
 
-      for i in Character'Pos(AC.Latin_1.UC_O_Oblique_Stroke) .. 
-               Character'Pos(AC.Latin_1.LC_O_Diaeresis) loop
-         if not ACH.Is_Letter(Character'Val(i)) then
+      for i in AWC.Latin_1.UC_O_Oblique_Stroke ..
+               AWC.Latin_1.LC_O_Diaeresis loop
+         if not AWCH.Is_Letter(i) then
             Report.Failed ("Incorrect Is_Letter result - 4");
          end if;
       end loop;
 
-      for i in Character'Pos(AC.Latin_1.LC_O_Oblique_Stroke) .. 
-               Character'Pos(AC.Latin_1.LC_Y_Diaeresis) loop
-         if not ACH.Is_Letter(Character'Val(i)) then
+      for i in AWC.Latin_1.LC_O_Oblique_Stroke ..
+               AWC.Latin_1.LC_Y_Diaeresis loop
+         if not AWCH.Is_Letter(i) then
             Report.Failed ("Incorrect Is_Letter result - 5");
          end if;
       end loop;
@@ -202,26 +233,26 @@
          end if;
       end loop;
 
-      for i in Character'Pos(AC.Latin_1.LC_A_Grave) .. 
-               Character'Pos(AC.Latin_1.LC_O_Diaeresis) loop
-         if not ACH.Is_Lower(Character'Val(i)) then
+      for i in AWC.Latin_1.LC_A_Grave ..
+               AWC.Latin_1.LC_O_Diaeresis loop
+         if not AWCH.Is_Lower(i) then
             Report.Failed ("Incorrect Is_Lower result - 2");
          end if;
       end loop;
 
-      for i in Character'Pos(AC.Latin_1.LC_O_Oblique_Stroke) .. 
-               Character'Pos(AC.Latin_1.LC_Y_Diaeresis) loop
-         if not ACH.Is_Lower(Character'Val(i)) then
+      for i in AWC.Latin_1.LC_O_Oblique_Stroke ..
+               AWC.Latin_1.LC_Y_Diaeresis loop
+         if not AWCH.Is_Lower(i) then
             Report.Failed ("Incorrect Is_Lower result - 3");
          end if;
       end loop;
 
       if ACH.Is_Lower('A')                         or
-         ACH.Is_Lower(AC.Latin_1.UC_Icelandic_Eth) or
+         AWCH.Is_Lower(AWC.Latin_1.UC_Icelandic_Eth)or
          ACH.Is_Lower(AC.Latin_1.Number_Sign)      or
-         ACH.Is_Lower(AC.Latin_1.Cedilla)          or
+         AWCH.Is_Lower(AWC.Latin_1.Cedilla)        or
          ACH.Is_Lower(AC.Latin_1.SYN)              or
-         ACH.Is_Lower(AC.Latin_1.ESA) 
+         AWCH.Is_Lower(AWC.Latin_1.ESA)
       then
          Report.Failed ("Incorrect Is_Lower result - 4");
       end if;
@@ -235,26 +266,26 @@
          end if;
       end loop;
 
-      for i in Character'Pos(AC.Latin_1.UC_A_Grave) .. 
-               Character'Pos(AC.Latin_1.UC_O_Diaeresis) loop
-         if not ACH.Is_Upper(Character'Val(i)) then
+      for i in AWC.Latin_1.UC_A_Grave ..
+               AWC.Latin_1.UC_O_Diaeresis loop
+         if not AWCH.Is_Upper(i) then
             Report.Failed ("Incorrect Is_Upper result - 2");
          end if;
       end loop;
 
-      for i in Character'Pos(AC.Latin_1.UC_O_Oblique_Stroke) .. 
-               Character'Pos(AC.Latin_1.UC_Icelandic_Thorn) loop
-         if not ACH.Is_Upper(Character'Val(i)) then
+      for i in AWC.Latin_1.UC_O_Oblique_Stroke ..
+               AWC.Latin_1.UC_Icelandic_Thorn loop
+         if not AWCH.Is_Upper(i) then
             Report.Failed ("Incorrect Is_Upper result - 3");
          end if;
       end loop;
 
       if ACH.Is_Upper('8')                    or
-         ACH.Is_Upper(AC.Latin_1.LC_A_Ring  ) or
+         AWCH.Is_Upper(AWC.Latin_1.LC_A_Ring) or
          ACH.Is_Upper(AC.Latin_1.Dollar_Sign) or
-         ACH.Is_Upper(AC.Latin_1.Broken_Bar)  or
+         AWCH.Is_Upper(AWC.Latin_1.Broken_Bar)or
          ACH.Is_Upper(AC.Latin_1.ETB)         or
-         ACH.Is_Upper(AC.Latin_1.VTS) 
+         AWCH.Is_Upper(AWC.Latin_1.VTS)
       then
          Report.Failed ("Incorrect Is_Upper result - 4");
       end if;
@@ -284,24 +315,24 @@
       end loop;
 
 
-      if not (ACH.Is_Basic(AC.Latin_1.UC_AE_Diphthong)     and  
-              ACH.Is_Basic(AC.Latin_1.LC_AE_Diphthong)     and
-              ACH.Is_Basic(AC.Latin_1.LC_German_Sharp_S)   and
-              ACH.Is_Basic(AC.Latin_1.LC_Icelandic_Eth)    and
-              ACH.Is_Basic(AC.Latin_1.LC_Icelandic_Thorn)  and
-              ACH.Is_Basic(AC.Latin_1.UC_Icelandic_Eth)    and
-              ACH.Is_Basic(AC.Latin_1.UC_Icelandic_Thorn))
+      if not (Is_Basic(AWC.Latin_1.UC_AE_Diphthong)        and
+              Is_Basic(AWC.Latin_1.LC_AE_Diphthong)        and
+              Is_Basic(AWC.Latin_1.LC_German_Sharp_S)      and
+              Is_Basic(AWC.Latin_1.LC_Icelandic_Eth)       and
+              Is_Basic(AWC.Latin_1.LC_Icelandic_Thorn)     and
+              Is_Basic(AWC.Latin_1.UC_Icelandic_Eth)       and
+              Is_Basic(AWC.Latin_1.UC_Icelandic_Thorn))
       then
          Report.Failed ("Incorrect Is_Basic result - 3");
       end if;
 
       -- Check for rejection of non-basics.
-      if ACH.Is_Basic(AC.Latin_1.UC_A_Tilde) or
-         ACH.Is_Basic(AC.Latin_1.LC_A_Grave) or
+      if Is_Basic(AWC.Latin_1.UC_A_Tilde)    or
+         Is_Basic(AWC.Latin_1.LC_A_Grave)    or
          ACH.Is_Basic(AC.Latin_1.Ampersand)  or
-         ACH.Is_Basic(AC.Latin_1.Yen_Sign)   or
+         Is_Basic(AWC.Latin_1.Yen_Sign)      or
          ACH.Is_Basic(AC.Latin_1.NAK)        or
-         ACH.Is_Basic(AC.Latin_1.SS2) 
+         Is_Basic(AWC.Latin_1.SS2)
       then
          Report.Failed ("Incorrect Is_Basic result - 4");
       end if;
@@ -368,8 +399,8 @@
          ACH.Is_Hexadecimal_Digit (AC.Latin_1.LC_G)              or
          ACH.Is_Hexadecimal_Digit (AC.Latin_1.LC_Z)              or
          ACH.Is_Hexadecimal_Digit ('G')                          or
-         ACH.Is_Hexadecimal_Digit (AC.Latin_1.Cent_Sign)         or
-         ACH.Is_Hexadecimal_Digit (AC.Latin_1.Pound_Sign)
+         AWCH.Is_Hexadecimal_Digit (AWC.Latin_1.Cent_Sign)       or
+         AWCH.Is_Hexadecimal_Digit (AWC.Latin_1.Pound_Sign)
       then
          Report.Failed ("Incorrect Is_HexaDecimal_Digit result - 4");
       end if;
@@ -390,14 +421,14 @@
          end if;
       end loop;
 
-      for i in Character'Pos(AC.Latin_1.Reserved_128) .. 
-               Character'Pos(AC.Latin_1.APC)  loop
-         TC_Boolean := ACH.Is_Alphanumeric(Character'Val(i)); 
+      for i in AWC.Latin_1.Reserved_128 ..
+               AWC.Latin_1.APC  loop
+         TC_Boolean := AWCH.Is_Alphanumeric(i);
          if TC_Boolean then
             Report.Failed ("Incorrect Is_Alphanumeric result - 2");
             TC_Boolean := False;
          end if;
-         if ACH.Is_Special(Character'Val(i)) then
+         if AWCH.Is_Special(i) then
             Report.Failed ("Incorrect Is_Special result - 2");
          end if;
       end loop;
@@ -448,54 +479,106 @@
          end if;
       end loop;
 
-      for i in Character'Pos(AC.Latin_1.No_Break_Space) ..
-               Character'Pos(AC.Latin_1.Inverted_Question) loop
-         TC_Boolean := ACH.Is_Alphanumeric(Character'Val(i)); 
+      for i in AWC.Latin_1.No_Break_Space ..
+               AWC.Latin_1.Inverted_Question loop
+         TC_Boolean := AWCH.Is_Alphanumeric(i) xor
+           i = AWC.Latin_1.Feminine_Ordinal_Indicator xor -- [drake]
+           i = AWC.Latin_1.Superscript_Two xor -- [drake]
+           i = AWC.Latin_1.Superscript_Three xor -- [drake]
+           i = AWC.Latin_1.Micro_Sign xor -- [drake]
+           i = AWC.Latin_1.Superscript_One xor -- [drake]
+           i = AWC.Latin_1.Masculine_Ordinal_Indicator xor -- [drake]
+           i = AWC.Latin_1.Fraction_One_Quarter xor -- [drake]
+           i = AWC.Latin_1.Fraction_One_Half xor -- [drake]
+           i = AWC.Latin_1.Fraction_Three_Quarters; -- [drake]
          if TC_Boolean then
             Report.Failed ("Incorrect Is_Alphanumeric result - 7");
             TC_Boolean := False;
          end if;
-         if not ACH.Is_Special(Character'Val(i)) then
+         if not AWCH.Is_Special(i) xor
+            i = AWC.Latin_1.Feminine_Ordinal_Indicator xor -- [drake]
+            i = AWC.Latin_1.SOFT_HYPHEN xor -- [drake]
+            i = AWC.Latin_1.Superscript_Two xor -- [drake]
+            i = AWC.Latin_1.Superscript_Three xor -- [drake]
+            i = AWC.Latin_1.Micro_Sign xor -- [drake]
+            i = AWC.Latin_1.Superscript_One xor -- [drake]
+            i = AWC.Latin_1.Masculine_Ordinal_Indicator xor -- [drake]
+            i = AWC.Latin_1.Fraction_One_Quarter xor -- [drake]
+            i = AWC.Latin_1.Fraction_One_Half xor -- [drake]
+            i = AWC.Latin_1.Fraction_Three_Quarters -- [drake]
+         then
             Report.Failed ("Incorrect Is_Special result - 7");
          end if;
       end loop;
 
-      for i in Character'Pos(AC.Latin_1.UC_A_Grave) ..
-               Character'Pos(AC.Latin_1.UC_O_Diaeresis) loop
-         if not ACH.Is_Alphanumeric(Character'Val(i)) then
+      for i in AWC.Latin_1.UC_A_Grave ..
+               AWC.Latin_1.UC_O_Diaeresis loop
+         if not AWCH.Is_Alphanumeric(i) then
             Report.Failed ("Incorrect Is_Alphanumeric result - 8");
          end if;
-         TC_Boolean := ACH.Is_Special(Character'Val(i)); 
+         TC_Boolean := AWCH.Is_Special(i);
          if TC_Boolean then
             Report.Failed ("Incorrect Is_Special result - 8");
             TC_Boolean := False;
          end if;
       end loop;
 
-      for i in Character'Pos(AC.Latin_1.UC_O_Oblique_Stroke) ..
-               Character'Pos(AC.Latin_1.LC_O_Diaeresis) loop
-         if not ACH.Is_Alphanumeric(Character'Val(i)) then
+      for i in AWC.Latin_1.UC_O_Oblique_Stroke ..
+               AWC.Latin_1.LC_O_Diaeresis loop
+         if not AWCH.Is_Alphanumeric(i) then
             Report.Failed ("Incorrect Is_Alphanumeric result - 9");
          end if;
-         TC_Boolean := ACH.Is_Special(Character'Val(i)); 
+         TC_Boolean := AWCH.Is_Special(i);
          if TC_Boolean then
             Report.Failed ("Incorrect Is_Special result - 9");
             TC_Boolean := False;
          end if;
       end loop;
 
-      for i in Character'Pos(AC.Latin_1.LC_O_Oblique_Stroke) ..
-               Character'Pos(AC.Latin_1.LC_Y_Diaeresis) loop
-         if not ACH.Is_Alphanumeric(Character'Val(i)) then
+      for i in AWC.Latin_1.LC_O_Oblique_Stroke ..
+               AWC.Latin_1.LC_Y_Diaeresis loop
+         if not AWCH.Is_Alphanumeric(i) then
             Report.Failed ("Incorrect Is_Alphanumeric result - 10");
          end if;
-         TC_Boolean := ACH.Is_Special(Character'Val(i)); 
+         TC_Boolean := AWCH.Is_Special(i);
          if TC_Boolean then
             Report.Failed ("Incorrect Is_Special result - 10");
             TC_Boolean := False;
          end if;
       end loop;
 
+      -- [drake] unicode categories
+      if not AWCH.Is_Lower (AWC.Latin_1.Micro_Sign) then
+         Report.Failed ("Incorrect Is_Lower result - 11");
+      end if;
+      if not Is_Other_Letter (AWC.Latin_1.Feminine_Ordinal_Indicator) then
+         Report.Failed ("Incorrect Is_Other_Letter result - 12");
+      end if;
+      if not Is_Other_Letter (AWC.Latin_1.Masculine_Ordinal_Indicator) then
+         Report.Failed ("Incorrect Is_Other_Letter result - 13");
+      end if;
+      if not Is_Other_Number (AWC.Latin_1.Superscript_Two) then
+         Report.Failed ("Incorrect Is_Other_Number result - 14");
+      end if;
+      if not Is_Other_Number (AWC.Latin_1.Superscript_Three) then
+         Report.Failed ("Incorrect Is_Other_Number result - 15");
+      end if;
+      if not Is_Other_Number (AWC.Latin_1.Superscript_One) then
+         Report.Failed ("Incorrect Is_Other_Number result - 16");
+      end if;
+      if not Is_Other_Number (AWC.Latin_1.Fraction_One_Quarter) then
+         Report.Failed ("Incorrect Is_Other_Number result - 17");
+      end if;
+      if not Is_Other_Number (AWC.Latin_1.Fraction_One_Half) then
+         Report.Failed ("Incorrect Is_Other_Number result - 18");
+      end if;
+      if not Is_Other_Number (AWC.Latin_1.Fraction_Three_Quarters) then
+         Report.Failed ("Incorrect Is_Other_Number result - 19");
+      end if;
+      if not Is_Format (AWC.Latin_1.SOFT_HYPHEN) then
+         Report.Failed ("Incorrect Is_Format result - 20");
+      end if;
+
 
    exception
       when others => Report.Failed ("Exception raised during processing");
