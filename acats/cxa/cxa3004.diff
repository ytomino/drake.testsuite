--- acats_41/cxa/cxa3004.a
+++ cxa/cxa3004.a
@@ -67,13 +67,13 @@
 
       package ACH renames Ada.Characters.Handling;
 
-      Char_End      : Integer        := 255;
-      WC_Start      : Integer        := 256;
+      Char_End      : Integer        := 127; -- [drake]
+      WC_Start      : Integer        := 128; -- [drake]
       Sub_Char      : Character      := '*';
 
       Blank         : Character      := ' ';
       First_Char    : Character      := Character'First;
-      Last_Char     : Character      := Character'Last;
+      Last_Char     : Character      := Character'Val (Char_End);
       F_Char        : Character      := 'F';
 
 
@@ -82,6 +82,13 @@
       First_Unique_Wide_Char : Wide_Character := Wide_Character'Val(WC_Start);
       Last_Wide_Char         : Wide_Character := Wide_Character'Last;
 
+      -- [drake] UTF-8
+      First_Unique_Wide_Char_In_String : constant String :=
+         Character'Val (16#C2#) & Character'Val (16#80#);
+      Last_Wide_Char_In_String : constant String :=
+         Character'Val (16#EF#) & Character'Val (16#BF#) &
+         Character'Val (16#BF#);
+
       A_String      : String (1..3)      := First_Char & 'X' & Last_Char;
       A_Wide_String : Wide_String (1..3) := First_Wide_Char            & 
                                             ACH.To_Wide_Character('X') & 
@@ -129,8 +136,8 @@
       end if;
 
 
-      if ACH.Is_String(Unique_Wide_String) or
-         ACH.Is_String(Mixed_Wide_String)
+      if not ACH.Is_String(Unique_Wide_String) or -- [drake]
+         not ACH.Is_String(Mixed_Wide_String) -- [drake]
       then
          Report.Failed ("Incorrect result from Is_String - 2");
       end if;
@@ -166,21 +173,24 @@
       end if;
 
      
-      if ACH.To_String(Unique_Wide_String, Sub_Char) /= "**" then
+      if ACH.To_String(Unique_Wide_String, Sub_Char) /=
+         First_Unique_Wide_Char_In_String & Last_Wide_Char_In_String
+      then
          Report.Failed ("Incorrect result from To_String - 2");
       end if;
 
 
 
       if ACH.To_String(Mixed_Wide_String,  Sub_Char) /= 
-         ('A' & First_Char & Last_Char & "**" & 'Z')   or
+         ('A' & First_Char & Last_Char & First_Unique_Wide_Char_In_String &
+          Last_Wide_Char_In_String & 'Z')              or
          ACH.To_String(Mixed_Wide_String,  Sub_Char) /= 
-         (ACH.To_Character(Mixed_Wide_String(1), Sub_Char) &
-          ACH.To_Character(Mixed_Wide_String(2), Sub_Char) &
-          ACH.To_Character(Mixed_Wide_String(3), Sub_Char) &
-          ACH.To_Character(Mixed_Wide_String(4), Sub_Char) &
-          ACH.To_Character(Mixed_Wide_String(5), Sub_Char) &
-          ACH.To_Character(Mixed_Wide_String(6), Sub_Char)) 
+         (ACH.To_String((1 => Mixed_Wide_String(1)), Sub_Char) &
+          ACH.To_String((1 => Mixed_Wide_String(2)), Sub_Char) &
+          ACH.To_String((1 => Mixed_Wide_String(3)), Sub_Char) &
+          ACH.To_String((1 => Mixed_Wide_String(4)), Sub_Char) &
+          ACH.To_String((1 => Mixed_Wide_String(5)), Sub_Char) &
+          ACH.To_String((1 => Mixed_Wide_String(6)), Sub_Char))
       then
          Report.Failed ("Incorrect result from To_String - 3");
       end if;
